<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AmpShell</name>
    </assembly>
    <members>
        <member name="T:AmpShell.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:AmpShell.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:AmpShell.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="P:AmpShell.DAL.UserDataAccessor.UserData">
            <summary>
            Gets object to load and save user data through XML (de)serialization.
            </summary>
        </member>
        <member name="M:AmpShell.DAL.UserDataAccessor.GetDataFilePath">
            <summary>
            Returns the path to the user data file (AmpShell.xml).
            </summary>
            <returns>The absolute path to the user data file.</returns>
        </member>
        <member name="M:AmpShell.DAL.UserDataAccessor.IsItAUniqueSignature(System.String)">
            <summary>
            Used when a new Category or Game is created : its signature must be unique so AmpShell
            can recognize it instantly.
            </summary>
            <param name="signatureToTest">A Category's or Game's signature..</param>
            <returns>Whether the signature equals none of the other ones, or not..</returns>
        </member>
        <member name="T:AmpShell.DOSBox.DOSBoxConfigFile">
            <summary>
            Represents a DOSBox Config File.
            </summary>
        </member>
        <member name="T:AmpShell.DOSBox.DOSBoxController">
            <summary>
            Used to start DOSBox with a game in it.
            </summary>
        </member>
        <member name="M:AmpShell.DOSBox.DOSBoxController.BuildArgs(AmpShell.Model.Game,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Builds the argument line in order to start DOSBox.
            </summary>
            <param name="selectedGame">Game the user wants to start.</param>
            <param name="forSetupExe">
            Whether or not we are starting the game's setup utility or the game itself.
            </param>
            <param name="dosBoxExePath">The path to DOSBox.exe.</param>
            <param name="dosboxDefaultConfFilePath">The .conf file to use for DOSBox.</param>
            <param name="dosboxDefaultLangFilePath">The .lng file to use for DOSBox.</param>
            <returns>.</returns>
        </member>
        <member name="M:AmpShell.DOSBox.DOSBoxController.RunOnlyDOSBox(System.String,System.String,System.String)">
            <summary>
            Run DOSBox itself, without any game.
            </summary>
            <param name="dosboxPath">Path to DOSBox.exe.</param>
            <param name="dosboxDefaultConfFilePath">Path to DOSBox.conf.</param>
            <param name="dosboxDefaultLangFilePath">Path to DOSBox.lng.</param>
            <returns>The DOSBox process if it started successfully, null otherwise.</returns>
        </member>
        <member name="M:AmpShell.DOSBox.DOSBoxController.StartDOSBox(System.String,System.String,System.String)">
            <summary>
            Starts DOSBox, and returns its <see cref="T:System.Diagnostics.Process" />.
            </summary>
            <param name="dosboxPath">Path to DOSBox.exe.</param>
            <param name="args">Command line args passed to DOSBox.</param>
            <param name="customConfFilePath">DOSBox config file to use (optional).</param>
            <returns>The DOSBox <see cref="T:System.Diagnostics.Process" />.</returns>
        </member>
        <member name="M:AmpShell.DOSBox.DOSBoxController.AddPrefsLangFile(System.String)">
            <summary>
            Path for the default language file used for DOSBox and specified by the user in the
            Tools menu.
            </summary>
            <param name="dosboxDefaultLangFilePath">.</param>
        </member>
        <member name="T:AmpShell.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:AmpShell.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:AmpShell.Model.Game.Directory">
            <summary>
            Gets or sets game's directory mounted as C:.
            </summary>
        </member>
        <member name="P:AmpShell.Model.Game.CDPath">
            <summary>
            Gets or sets game's CD image / CD directory (like 'D:\') location.
            </summary>
        </member>
        <member name="P:AmpShell.Model.Game.CDLabel">
            <summary>
            Gets or sets optional, user-specified CD LABEL (only when it is not an image).
            </summary>
        </member>
        <member name="P:AmpShell.Model.Game.SetupEXEPath">
            <summary>
            Gets or sets game's setup executable location.
            </summary>
        </member>
        <member name="P:AmpShell.Model.Game.DBConfPath">
            <summary>
            Gets or sets game's custom DOSBox .conf file path.
            </summary>
        </member>
        <member name="P:AmpShell.Model.Game.AdditionalCommands">
            <summary>
            Gets or sets game's additional commands for DOSBox.
            </summary>
        </member>
        <member name="P:AmpShell.Model.Game.UseIOCTL">
            <summary>
            Gets or sets a value indicating whether option to use IOCTL (only available for optical drives).
            </summary>
        </member>
        <member name="P:AmpShell.Model.Game.MountAsFloppy">
            <summary>
            Gets or sets a value indicating whether option to use the image file as a floppy (A:).
            </summary>
        </member>
        <member name="P:AmpShell.Model.Game.NoConfig">
            <summary>
            Gets or sets a value indicating whether boolean if no config is used ("Don't use any
            config file at all" checkbox in GameForm) Legacy 0.72 or older DOSBox option.
            </summary>
        </member>
        <member name="P:AmpShell.Model.Game.NoConsole">
            <summary>
            Gets or sets a value indicating whether boolean for displaying DOSBox's console.
            </summary>
        </member>
        <member name="P:AmpShell.Model.Game.QuitOnExit">
            <summary>
            Gets or sets a value indicating whether boolean for the -exit switch for DOSBox (if set
            to true, DOSBox closes when the game exits).
            </summary>
        </member>
        <member name="P:AmpShell.Model.Game.DOSEXEPath">
            <summary>
            Gets or sets game's main executable location.
            </summary>
        </member>
        <member name="P:AmpShell.Model.Game.CDIsAnImage">
            <summary>
            Gets or sets a value indicating whether if GameCDPath points to a CD image file (false
            if it points to a directory).
            </summary>
        </member>
        <member name="P:AmpShell.Model.Game.AlternateDOSBoxExePath">
            <summary>
            Gets or sets if we want to use DOSBox Daum, ECE, SVN, or other instead of the one set in
            the global preferences.
            </summary>
        </member>
        <member name="T:AmpShell.Model.ModelWithChildren">
            <summary>
            Root node for the xml file.
            </summary>
        </member>
        <member name="F:AmpShell.Model.ModelWithChildren.children">
            <summary>
            List that will build up the tree of categories and games through the AddChild and RemoveChild and ListChildren methods.
            </summary>
        </member>
        <member name="M:AmpShell.Notification.PropertyChangedNotifier.Set``1(``0@,``0,System.String)">
            <summary>
            Checks if a property already matches a desired value. Sets the property and
            notifies listeners only when necessary.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="storage">Reference to a property with both getter and setter..</param>
            <param name="value">Desired value for the property..</param>
            <param name="propertyName">Name of the property used to notify listeners. This
            value is optional and can be provided automatically when invoked from compilers that
            support CallerMemberName..</param>
            <returns>True if the value was changed, false if the existing value matched the
            desired value..</returns>
        </member>
        <member name="T:AmpShell.WinShell.IShellLinkW">
            <summary>The IShellLink interface allows Shell links to be created, modified, and resolved.</summary>
        </member>
        <member name="M:AmpShell.WinShell.IShellLinkW.GetPath(System.Text.StringBuilder,System.Int32,AmpShell.WinShell.WIN32_FIND_DATAW@,AmpShell.WinShell.SLGP_FLAGS)">
            <summary>Retrieves the path and file name of a Shell link object.</summary>
        </member>
        <member name="M:AmpShell.WinShell.IShellLinkW.GetIDList(System.IntPtr@)">
            <summary>Retrieves the list of item identifiers for a Shell link object.</summary>
        </member>
        <member name="M:AmpShell.WinShell.IShellLinkW.SetIDList(System.IntPtr)">
            <summary>Sets the pointer to an item identifier list (PIDL) for a Shell link object..</summary>
        </member>
        <member name="M:AmpShell.WinShell.IShellLinkW.GetDescription(System.Text.StringBuilder,System.Int32)">
            <summary>Retrieves the description string for a Shell link object.</summary>
        </member>
        <member name="M:AmpShell.WinShell.IShellLinkW.SetDescription(System.String)">
            <summary>Sets the description for a Shell link object. The description can be any application-defined string.</summary>
        </member>
        <member name="M:AmpShell.WinShell.IShellLinkW.GetWorkingDirectory(System.Text.StringBuilder,System.Int32)">
            <summary>Retrieves the name of the working directory for a Shell link object.</summary>
        </member>
        <member name="M:AmpShell.WinShell.IShellLinkW.SetWorkingDirectory(System.String)">
            <summary>Sets the name of the working directory for a Shell link object.</summary>
        </member>
        <member name="M:AmpShell.WinShell.IShellLinkW.GetArguments(System.Text.StringBuilder,System.Int32)">
            <summary>Retrieves the command-line arguments associated with a Shell link object.</summary>
        </member>
        <member name="M:AmpShell.WinShell.IShellLinkW.SetArguments(System.String)">
            <summary>Sets the command-line arguments for a Shell link object.</summary>
        </member>
        <member name="M:AmpShell.WinShell.IShellLinkW.GetHotkey(System.Int16@)">
            <summary>Retrieves the hot key for a Shell link object.</summary>
        </member>
        <member name="M:AmpShell.WinShell.IShellLinkW.SetHotkey(System.Int16)">
            <summary>Sets a hot key for a Shell link object.</summary>
        </member>
        <member name="M:AmpShell.WinShell.IShellLinkW.GetShowCmd(System.Int32@)">
            <summary>Retrieves the show command for a Shell link object.</summary>
        </member>
        <member name="M:AmpShell.WinShell.IShellLinkW.SetShowCmd(System.Int32)">
            <summary>Sets the show command for a Shell link object. The show command sets the initial show state of the window..</summary>
        </member>
        <member name="M:AmpShell.WinShell.IShellLinkW.GetIconLocation(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>Retrieves the location (path and index) of the icon for a Shell link object.</summary>
        </member>
        <member name="M:AmpShell.WinShell.IShellLinkW.SetIconLocation(System.String,System.Int32)">
            <summary>Sets the location (path and index) of the icon for a Shell link object.</summary>
        </member>
        <member name="M:AmpShell.WinShell.IShellLinkW.SetRelativePath(System.String,System.Int32)">
            <summary>Sets the relative path to the Shell link object.</summary>
        </member>
        <member name="M:AmpShell.WinShell.IShellLinkW.Resolve(System.IntPtr,AmpShell.WinShell.SLR_FLAGS)">
            <summary>Attempts to find the target of a Shell link, even if it has been moved or renamed.</summary>
        </member>
        <member name="M:AmpShell.WinShell.IShellLinkW.SetPath(System.String)">
            <summary>Sets the path and file name of a Shell link object.</summary>
        </member>
        <member name="F:AmpShell.WinShell.SLGP_FLAGS.SLGP_SHORTPATH">
            <summary>Retrieves the standard short (8.3 format) file name</summary>
        </member>
        <member name="F:AmpShell.WinShell.SLGP_FLAGS.SLGP_UNCPRIORITY">
            <summary>Retrieves the Universal Naming Convention (UNC) path name of the file</summary>
        </member>
        <member name="F:AmpShell.WinShell.SLGP_FLAGS.SLGP_RAWPATH">
            <summary>Retrieves the raw path name. A raw path is something that might not exist and may include environment variables that need to be expanded</summary>
        </member>
        <member name="F:AmpShell.WinShell.SLR_FLAGS.SLR_NO_UI">
            <summary>
            Do not display a dialog box if the link cannot be resolved. When SLR_NO_UI is set,
            the high-order word of fFlags can be set to a time-out value that specifies the
            maximum amount of time to be spent resolving the link. The function returns if the
            link cannot be resolved within the time-out duration. If the high-order word is set
            to zero, the time-out duration will be set to the default value of 3,000 milliseconds
            (3 seconds). To specify a value, set the high word of fFlags to the desired time-out
            duration, in milliseconds.
            </summary>
        </member>
        <member name="F:AmpShell.WinShell.SLR_FLAGS.SLR_ANY_MATCH">
            <summary>Obsolete and no longer used</summary>
        </member>
        <member name="F:AmpShell.WinShell.SLR_FLAGS.SLR_UPDATE">
            <summary>If the link object has changed, update its path and list of identifiers.
            If SLR_UPDATE is set, you do not need to call IPersistFile::IsDirty to determine
            whether or not the link object has changed.</summary>
        </member>
        <member name="F:AmpShell.WinShell.SLR_FLAGS.SLR_NOUPDATE">
            <summary>Do not update the link information</summary>
        </member>
        <member name="F:AmpShell.WinShell.SLR_FLAGS.SLR_NOSEARCH">
            <summary>Do not execute the search heuristics</summary>
        </member>
        <member name="F:AmpShell.WinShell.SLR_FLAGS.SLR_NOTRACK">
            <summary>Do not use distributed link tracking</summary>
        </member>
        <member name="F:AmpShell.WinShell.SLR_FLAGS.SLR_NOLINKINFO">
            <summary>Disable distributed link tracking. By default, distributed link tracking tracks
            removable media across multiple devices based on the volume name. It also uses the
            Universal Naming Convention (UNC) path to track remote file systems whose drive letter
            has changed. Setting SLR_NOLINKINFO disables both types of tracking.</summary>
        </member>
        <member name="F:AmpShell.WinShell.SLR_FLAGS.SLR_INVOKE_MSI">
            <summary>Call the Microsoft Windows Installer</summary>
        </member>
    </members>
</doc>
